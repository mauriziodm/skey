<?xml version="1.0" encoding="utf-8"?>
<nodeSet version="1.0">
  <view uin="6qp34qwnoop_v">
    <property name="$defaultDiagram" value="true" />
    <property name="$metaclass" value="Package Diagram" />
    <property name="$name" value="default" />
    <reference referencedUin="delphi:e_class:src:SKeyCommon:Model.SessionServer.ISWSessionManager">
      <property name="$shortcutReference" value="true" />
      <property name="background_color" value="255, 192, 192" />
      <property name="bounds" value="600,100,240,180" />
      <property name="location_set_by_user" value="True" />
      <property name="bounds_setted_by_user" value="True" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionManager.SessionDispose(System.Integer)">
        <property name="bounds" value="66,-3,0,0" />
      </reference>
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionManager.SessionPoll(System.Integer,System.string,System.string,System.string,System.string)">
        <property name="bounds" value="66,27,0,0" />
      </reference>
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionManager.SessionNew(System.string,System.string,System.string,System.string)">
        <property name="bounds" value="66,12,0,0" />
      </reference>
    </reference>
    <reference referencedUin="delphi:e_class:src:SKeyCommon:Model.SessionServer.@unitclass">
      <property name="$shortcutReference" value="true" />
    </reference>
    <reference referencedUin="delphi:e_class:src:SKeyCommon:Model.SessionServer.ISWSessionServer">
      <property name="$shortcutReference" value="true" />
      <property name="background_color" value="255, 192, 192" />
      <property name="bounds" value="120,100,206,143" />
      <property name="location_set_by_user" value="True" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionServer.SessionDispose(System.Integer,System.Integer)">
        <property name="bounds" value="179,27,0,0" />
      </reference>
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionServer.SessionPoll(System.Integer,System.Integer,System.string,System.string,System.string,System.string)">
        <property name="bounds" value="179,57,0,0" />
      </reference>
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionServer.SessionNew(System.Integer,System.string,System.string,System.string,System.string)">
        <property name="bounds" value="179,42,0,0" />
      </reference>
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.SessionServer.ISWSessionServer.Licenses" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.SessionServer.ISWSessionServer.GetLicenses()" />
    </reference>
    <reference referencedUin="delphi:e_class:src:SKeyCommon:Model.CustomerIntf.ISWLicense">
      <property name="$shortcutReference" value="true" />
      <property name="background_color" value="224, 224, 224" />
      <property name="bounds" value="420,400,354,640" />
      <property name="foreground_color" value="128, 128, 128" />
      <property name="location_set_by_user" value="True" />
      <property name="bounds_setted_by_user" value="True" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.SetUsers(System.Generics.Collections.TList&lt;Model.CustomerIntf.ISWLicenseUser&gt;)" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetUsers()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.Users" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetCounterSessions()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.CounterSessions" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetCounterAppUsers()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.CounterAppUsers" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetCounterHW()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.CounterHW" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetIsExpired()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.IsExpired" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetIsSuspended()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.IsSuspended" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.SetHash(System.string)" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetHash()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.Hash" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.SetNote(System.string)" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetNote()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.Note" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.SetState(Model.CustomerIntf.TSWLicenseState)" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetState()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.State" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetSessions()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.Sessions" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetLicenseModel()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.LicenseModel" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.RevertToModel()" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetIsActive()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.IsActive" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetExpiration()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.Expiration" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.SetActiveSince(System.TDate)" />
      <reference referencedUin="delphi:e_method:src:SKeyCommon:Model.CustomerIntf.ISWLicense.GetActiveSince()" />
      <reference referencedUin="delphi:e_property:src:SKeyCommon:Model.CustomerIntf.ISWLicense.ActiveSince" />
    </reference>
  </view>
</nodeSet>